/*
问题 C: 忙碌的班长
时间限制: 1 Sec  内存限制: 128 MB
提交: 305  解决: 70
[提交][状态][讨论版]
题目描述
小蓝鲸班级里的座位格局，是和别处不同的，所有的座位被分成了2个小组。班级里一共有N个调皮蛋，编号分别为1~N。并且某些调皮蛋彼此之间很合得来，如果两个玩得来的调皮蛋凑到了一起，他们会给班级秩序带来很大的破坏，这里定义一个“破坏值”（正整数）来表示两个调皮蛋凑到一起搞事情造成的破坏力。唯一能够制止这两个调皮蛋“共同作祟”的方法，就是把他们两人的座位安排在两个不同的小组。

每个星期结束的时候，作为班长的小蓝鲸都会统计一周之内班上发生的所有破坏性事件，并且基于破坏力从高到低排成一份报告。事务繁忙的班主任只会去看报告中的第一个事件的破坏力，如果破坏力很大，班主任就会认为是小蓝鲸管理安排不当，考虑撤换班长。

小蓝鲸想要保住自己的班长职务，为此他只能向聪明的你求助，让你帮忙重新安排班级里N个调皮蛋的座位，从而使得一周之内班级里发生的最高破坏力事件的破坏值最低。假设只要两个合得来的调皮蛋座位分在了同一组，那么这一周之内他们一定会一起策划一场对应破坏值的事件，请你试着求出这一最低破坏值。

注意：本题允许使用sort库函数进行排序。 

输入
第一行输入两个正整数N和M，分别表示调皮蛋的人数以及会凑到一起搞事情的调皮蛋对数。1≤N≤20000，0≤M≤100000。

接下来的M行，每行三个正整数xi，yi，pi，表示xi号调皮蛋和yi号调皮蛋凑到一起会策划的破坏力事件的破坏值。1≤xi＜yi≤N，1≤pi≤10000，保证每一对调皮蛋组合只出现一次。 

输出
仅一个整数，表示小蓝鲸最终让班主任看到的最高破坏力事件破坏值的最低值。
样例输入
5 8
4 5 8730
2 4 5777
2 5 6235
2 3 6164
1 2 4462
1 3 1292
3 5 4380
3 4 7220
样例输出
5777
提示
对于输入样例，将调皮蛋2，4放在一组，3，5放在一组，1随意放置在任意一组，得到的最大破坏力事件由2号和4号调皮蛋策划，破坏力值为5777，这种安排得到的最大破坏力事件的破坏值最小。

[提交][状态]
*/
#include<algorithm>
#include<iostream>
 
using namespace std;
struct node
{
    int p1;
    int p2;
    int data;
};
const int N = 200000;
node people[N];
int p[N];
bool cmp(node a, node b)
{
    return a.data > b.data;
}
int find(int x)
{
    return x == p[x] ? x : x = find(p[x]);
}
int main()
{
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i)
    {
        cin >> people[i].p1;
        cin >> people[i].p2;
        cin >> people[i].data;
    }
    for (int i = 1; i <= 2 * n; ++i)
    {
        p[i] = i;
    }
    sort(people, people + m, cmp);
    for (int i = 0; i < m; ++i)
    {
        int x = find(people[i].p1); int y = find(people[i].p2);
        if (x == y)
        {
            cout << people[i].data << endl;
            return 0;
        }
        p[x] = find(people[i].p2 + n);
        p[y] = find(people[i].p1 + n);
    }
    cout << "0" << endl;
    return 0;
}
 
/**************************************************************
    Problem: 1192
    User: 181860077
    Language: C++
    Result: 正确
    Time:532 ms
    Memory:4664 kb
****************************************************************/